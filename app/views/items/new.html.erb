
<br>

<div class="mt-3">
  <%= link_to "Back to Tier List", tier_list_path(@tier_list), class: "btn btn-outline-primary" %>
</div>

<br>
<!---->
<%#= render "form", items: @items %>
<!---->

<%= form_with(model: @tier_list, url: tier_list_items_path(@tier_list), method: :post, local: true, html: { class: "needs-validation", multipart: true }) do |f| %>


  <div class="items-container">
    <% 8.times do |index| %>
      <%= render partial: "item_form_fields", locals: { index: index, custom_fields: @custom_fields } %>
    <% end %>
  </div>

  <div class="d-flex justify-content-between align-items-center mb-3">
  <button type="button" class="btn btn-secondary" id="add-item-button">Add Another Item</button>
  <%= f.submit "Save Items", class: "btn btn-primary" %>
</div>

<% end %>

<!-- Template for Dynamic Item Fields -->
<template id="item-template">
  <%= render partial: "item_form_fields", locals: { index: "NEW_INDEX", custom_fields: @custom_fields } %>
</template>


<script>

document.addEventListener("DOMContentLoaded", function () {
  const addItemButton = document.getElementById("add-item-button");
  const itemsContainer = document.querySelector(".items-container");
  const itemTemplate = document.getElementById("item-template").innerHTML;

  let itemCounter = itemsContainer.querySelectorAll(".item").length; // Start counter based on existing items

  // Add item functionality
  addItemButton.addEventListener("click", function () {
    itemCounter++; // Increment the counter
    const newItem = itemTemplate.replace(/NEW_INDEX/g, itemCounter); // Replace placeholder with unique counter
    itemsContainer.insertAdjacentHTML("beforeend", newItem); // Add the new item
    attachDeleteItemHandlers(); // Re-attach event handlers for delete buttons
  });

  // Delete item functionality
  function attachDeleteItemHandlers() {
    const deleteButtons = itemsContainer.querySelectorAll(".delete-item-button");
    deleteButtons.forEach((button) => {
      button.addEventListener("click", function () {
        const itemToRemove = this.closest(".item");
        itemToRemove.remove();
      });
    });
  }

  // Attach delete handlers on page load
  attachDeleteItemHandlers();
});


</script>
