<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Net Worth Calculator</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="container my-5 p-4 bg-light rounded">
    <h2 class="text-center mb-4">Net Worth Calculator</h2>

    <!-- Prepopulate Buttons -->
    <div class="d-flex justify-content-center mb-4">
      <button onclick="populateForm('analystToVP')" class="btn btn-secondary mx-2">Analyst → VP</button>
      <button onclick="populateForm('analystToPEToMBA')" class="btn btn-secondary mx-2">Analyst → PE → MBA</button>
      <button onclick="populateForm('mbaAssociate')" class="btn btn-secondary mx-2">MBA Associate</button>
      <button onclick="populateForm('mbaAssociateWithDebt')" class="btn btn-secondary mx-2">MBA Associate with Debt</button>
    </div>

    <!-- Form -->
    <form id="netWorthForm">
      <div class="row g-3">
        <div class="col-md-6">
          <label for="age" class="form-label">Starting Age</label>
          <input type="number" class="form-control" id="age" placeholder="e.g., 22" required>
        </div>
        <div class="col-md-6">
          <label for="netWorth" class="form-label">Starting Net Worth ($)</label>
          <input type="text" class="form-control money-field" id="netWorth" placeholder="e.g., -5,000" required>
        </div>
        <div class="col-md-6">
          <label for="salary" class="form-label">Starting Banking Compensation ($)</label>
          <input type="text" class="form-control money-field" id="salary" placeholder="e.g., 200,000" required>
        </div>
        <div class="col-md-6">
          <label for="savingsRate" class="form-label">Savings Rate (%)</label>
          <input type="text" class="form-control percentage-field" id="savingsRate" placeholder="e.g., 35" required>
        </div>
        <div class="col-md-6">
          <label for="growthRate" class="form-label">Banking/PE Compensation Growth Rate (%)</label>
          <input type="text" class="form-control percentage-field" id="growthRate" placeholder="e.g., 20" required>
        </div>
        <div class="col-md-6">
          <label for="investmentGrowthRate" class="form-label">Investment Growth Rate (%)</label>
          <input type="text" class="form-control percentage-field" id="investmentGrowthRate" placeholder="e.g., 7" required>
        </div>
        <div class="col-md-6">
          <label for="yearsInBanking" class="form-label">Years in Banking (or PE)</label>
          <input type="number" class="form-control" id="yearsInBanking" placeholder="e.g., 6" required>
        </div>
        <div class="col-md-6">
          <label for="retirementNetWorth" class="form-label">Target Net Worth ($)</label>
          <input type="text" class="form-control money-field" id="retirementNetWorth" placeholder="e.g., 5,000,000" required>
        </div>
        <div class="col-md-6">
          <label for="pursueMBA" class="form-label">Pursue MBA?</label>
          <input type="checkbox" id="pursueMBA">
        </div>
        <div class="col-12 text-center">
          <button type="submit" class="btn btn-primary btn-lg mt-3">Calculate</button>
          <button type="button" class="btn btn-outline-primary btn-lg mt-3" data-bs-toggle="modal" data-bs-target="#assumptionsModal">Assumptions</button>
        </div>





      </div>
    </form>

    <!-- Chart -->
    <div class="mt-5">
      <canvas id="netWorthChart" width="400" height="200"></canvas>
    </div>
  </div>

  <script>
    // Centralized predefined scenarios
    const scenarios = {
      analystToVP: {
        startAge: 22,
        startingNetWorth: -50000,
        startingBankingComp: 200000,
        bankingSalaryGrowthRate: 20,
        yearsInBanking: 6,
        pursueMBA: false,
        savingsRate: 30,
        targetNetWorth: 3000000,
        investmentGrowthRate: 7,
      },
      analystToPEToMBA: {
        startAge: 22,
        startingNetWorth: -50000,
        startingBankingComp: 200000,
        bankingSalaryGrowthRate: 20,
        yearsInBanking: 6,
        pursueMBA: true,
        savingsRate: 30,
        targetNetWorth: 3000000,
        investmentGrowthRate: 7,
      },
      mbaAssociate: {
        startAge: 30,
        startingNetWorth: 150000,
        startingBankingComp: 300000,
        bankingSalaryGrowthRate: 20,
        yearsInBanking: 4,
        pursueMBA: false,
        savingsRate: 20,
        targetNetWorth: 3000000,
        investmentGrowthRate: 7,
      },
      mbaAssociateWithDebt: {
        startAge: 30,
        startingNetWorth: -50000,
        startingBankingComp: 300000,
        bankingSalaryGrowthRate: 20,
        yearsInBanking: 4,
        pursueMBA: false,
        savingsRate: 20,
        targetNetWorth: 3000000,
        investmentGrowthRate: 7,
      }


    };

    // Function to populate the form based on a selected scenario
    function populateForm(scenarioKey) {
      const values = scenarios[scenarioKey];
      document.getElementById('age').value = values.startAge;
      document.getElementById('netWorth').value = formatMoney(values.startingNetWorth);
      document.getElementById('salary').value = formatMoney(values.startingBankingComp);
      document.getElementById('savingsRate').value = formatPercentage(values.savingsRate);
      document.getElementById('growthRate').value = formatPercentage(values.bankingSalaryGrowthRate);
      document.getElementById('investmentGrowthRate').value = formatPercentage(values.investmentGrowthRate);
      document.getElementById('yearsInBanking').value = values.yearsInBanking;
      document.getElementById('pursueMBA').checked = values.pursueMBA;
      document.getElementById('retirementNetWorth').value = formatMoney(values.targetNetWorth);
    }

    // Helper functions for formatting
    function formatMoney(value) {
      return `$${Number(value).toLocaleString()}`;
    }

    function formatPercentage(value) {
      return `${value}%`;
    }

    function parseMoney(value) {
      return parseFloat(value.replace(/[$,]/g, ''));
    }

    function parsePercentage(value) {
      return parseFloat(value.replace('%', '')) / 100;
    }

    // Chart rendering
    function renderChart(labels, netWorthData, compensationData, targetNetWorth) {
      const ctx = document.getElementById('netWorthChart').getContext('2d');
      if (window.netWorthChart instanceof Chart) {
        window.netWorthChart.destroy();
      }
      window.netWorthChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Net Worth Over Time',
              data: netWorthData,
              borderColor: 'rgba(75, 192, 192, 1)',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderWidth: 2,
            },
            {
              label: 'Target Net Worth',
              data: Array(labels.length).fill(targetNetWorth), // Horizontal line
              borderColor: 'rgba(255, 99, 132, 1)',
              borderDash: [5, 5],
              borderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          plugins: {
            tooltip: {
              callbacks: {
                label: function (context) {
                  const netWorth = Math.round(context.raw); // Round net worth
                  const compensation = compensationData[context.dataIndex];
                  return [
                    `Net Worth: ${formatMoney(netWorth)}`,
                    `Compensation: ${formatMoney(compensation || 0)}`,
                  ];
                },
              },
            },
          },
          scales: {
            y: {
              beginAtZero: false,
            },
          },
        },
      });
    }

    // Form submission logic
    document.getElementById('netWorthForm').addEventListener('submit', function (e) {
      e.preventDefault();

      const age = parseInt(document.getElementById('age').value);
      const startingNetWorth = parseMoney(document.getElementById('netWorth').value);
      const startingBankingComp = parseMoney(document.getElementById('salary').value);
      const savingsRate = parsePercentage(document.getElementById('savingsRate').value);
      const bankingSalaryGrowthRate = parsePercentage(document.getElementById('growthRate').value);
      const investmentGrowthRate = parsePercentage(document.getElementById('investmentGrowthRate').value);
      const yearsInBanking = parseInt(document.getElementById('yearsInBanking').value);
      const pursueMBA = document.getElementById('pursueMBA').checked;
      const targetNetWorth = parseMoney(document.getElementById('retirementNetWorth').value);

      const labels = [];
      const netWorthData = [];
      const compensationData = [];
      let netWorth = startingNetWorth;
      let previousCompensation = startingBankingComp;
      let MBAYears = 0; // Counter for Pre-MBA Years
      let corporateStartingComp = 0;
      let corporateStartInitializer = 1;
      let remainingBankingYears = yearsInBanking;
      let corpSalaryGrowthRate = .05;
      let corpSavingsRate = .15;

      for (let year = age; year <= 65; year++) {
        labels.push(year);
        netWorthData.push(netWorth);

        // Apply investment growth to current net worth
        netWorth += netWorth * investmentGrowthRate;

        if (
          pursueMBA &&
          (
            (age <= 23 && year >= age + 4 && year < age + 6) || // MBA after 4 years if age ≤ 23
            (age >= 24 && year >= age + 2 && year < age + 4)    // MBA after 2 years if age ≥ 24
          )
        ) {
          // MBA years
          MBAYears += 1
          netWorth -= 120000; // MBA costs
          compensationData.push(0); // No salary during MBA
          
        }  else if (remainingBankingYears > 0) {
          // Banking/PE years

          // Push the current salary before recalculating it
          compensationData.push(previousCompensation); // Push salary from the previous year (or initial value)

          // Recalculate salary for the current year
          const salary = Math.min(
            previousCompensation * (1 + bankingSalaryGrowthRate), // Compute the new salary
            1_000_000 // Cap at 1 million
          );
          netWorth += salary * savingsRate; // Add savings from banking salary to net worth
          previousCompensation = salary; // Update last year's salary
          remainingBankingYears -= 1; // Decrease remaining banking years

        } else {
          // Corporate years (after banking or MBA)

          if (corporateStartInitializer === 1 && !pursueMBA) {
            // Transition to corporate without MBA: Start with 50% of last banking year's salary
            previousCompensation = previousCompensation / (1 + bankingSalaryGrowthRate); // Removing the last year of salary growth
            corporateStartingComp = previousCompensation * 0.5;
            corporateStartInitializer -= 1;
            compensationData.push(corporateStartingComp);
            previousCompensation = corporateStartingComp;
            netWorth += previousCompensation * corpSavingsRate; // Add savings from banking salary to net worth
          } else if (corporateStartInitializer === 1 && pursueMBA) {
            // Transition to corporate without MBA: Start with 50% of last banking year's salary
            previousCompensation = previousCompensation / (1 + bankingSalaryGrowthRate); // Removing the last year of salary growth
            corporateStartingComp = previousCompensation * 0.5;
            corporateStartInitializer -= 1;
            compensationData.push(corporateStartingComp);
            previousCompensation = corporateStartingComp;
            netWorth += previousCompensation * corpSavingsRate; // Add savings from banking salary to net worth
          } else {
            const corporateComp = Math.min(
              previousCompensation * (1 + corpSalaryGrowthRate), // Compute the new compensation
              500_000 // Cap at 500K
            );
            compensationData.push(corporateComp);
            previousCompensation = corporateComp;
            netWorth += previousCompensation * corpSavingsRate; // Add savings from banking salary to net worth


          }

        


        }

        
      }

      renderChart(labels, netWorthData, compensationData, targetNetWorth);
    });
  </script>

<div class="modal fade" id="assumptionsModal" tabindex="-1" aria-labelledby="assumptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assumptionsModalLabel">Assumptions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <ul>
          <li><strong>Savings Rates Account for Taxes</strong></li>
          <hr class="mb-1 mt-1">
          <li><strong>Corporate Savings Rate:</strong> 15%</li>
          <hr class="mb-1 mt-1">
          <li><strong>Corporate Salary Annual Growth Rate:</strong> 5%</li>
          <hr class="mb-1 mt-1">
          <li><strong>Corporate Starting Salary:</strong> 50% of the last year of the banking/finance salary</li>
          <hr class="mb-1 mt-1">
          <li><strong>Corporate Salary Cap:</strong> $500,000</li>
          <hr class="mb-1 mt-1">
          <li><strong>Banking/Finance Compensation Cap:</strong> $1,000,000</li>
          <hr class="mb-1 mt-1">
          <li><strong>Investment Growth:</strong> Assumed to be constant each year</li>
          <hr class="mb-1 mt-1">
          <li><strong>Major Expenses:</strong> Assumed to be included in the savings rate (e.g., college tuition, car purchases)</li>
          <hr class="mb-1 mt-1">
          <li><strong>MBA Cost:</strong> $120,000 per year</li>
          <hr class="mb-1 mt-1">
          <li><strong>Compensation During MBA:</strong> $0</li>
          <hr class="mb-1 mt-1">
        </ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>


</body>
</html>

<!-- else if (yearsInBanking > 0) {
  // Banking/PE years
  const salary = previousCompensation * Math.pow(1 + bankingSalaryGrowthRate, 1);
  netWorth += salary * savingsRate; // Add savings from banking salary to net worth
  compensationData.push(salary); // Add salary to chart data
  previousCompensation = salary; // Update last year's salary
  yearsInBanking -= 1; // Decrease remaining banking years
}-->
